name: "Terraform"

# Use on: pull_request to validate terraform syntax before merging into your branch
on:
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cancel previous workflow
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ github.token }}
#      - name: Set variables
#        id: setvars
#        run: |
#          if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" || "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
#            echo "STAGE=prod" >> $GITHUB_ENV
#            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
#            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
#            echo "AWS_ROLE_EXTERNAL_ID=${{ secrets.AWS_ROLE_EXTERNAL_ID_PROD }}" >> $GITHUB_ENV
#          fi
#          if [[ "${{github.base_ref}}" == "develop" || "${{github.ref}}" == "refs/heads/develop" ]]; then
#            echo "STAGE=dev" >> $GITHUB_ENV
#            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
#            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
#            echo "AWS_ROLE_EXTERNAL_ID=${{ secrets.AWS_ROLE_EXTERNAL_ID_DEV }}" >> $GITHUB_ENV
#          fi
      - name: Checkout
        uses: actions/checkout@v3
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
#          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
#          aws-region: ap-southeast-2
#          role-to-assume: cicd-role
#          role-external-id: ${{ env.AWS_ROLE_EXTERNAL_ID }}
#          role-duration-seconds: 1200
#          role-session-name: github-action
#          role-skip-session-tagging: true
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} # from Terraform Cloud
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
#      - name: Copy files from the s3 application source bucket
#        run: aws s3 cp s3://${{env.TF_STATE_BUCKET}}-${{env.STAGE}}/terraform.tfstate terraform.tfstate
#        continue-on-error: true
#      - name: Copy var file from the s3 application source bucket
#        run: aws s3 cp s3://${{env.TF_STATE_BUCKET}}-${{env.STAGE}}/terraform.tfvars terraform.tfvars
#        continue-on-error: true
#      ### Clean up existing resource for clean install
#      - name: Terraform Destroy
#        id: plan
#        run: terraform destroy -var-file terraform.tfvars
#      ### Clean up existing resource for clean install
#      - name: Terraform Plan
#        id: plan
#        run: terraform plan -out=".terraform_plan_dev" -var-file terraform.tfvars
#      - name: Terraform Apply
#        run: terraform apply ".terraform_plan_dev"
#      - name: Copy files to the s3 application source bucket
#        run: aws s3 cp terraform.tfstate s3://${{env.TF_STATE_BUCKET}}-${{env.STAGE}}/terraform.tfstate
